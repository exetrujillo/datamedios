"'datos' debe ser un data frame."
)
})
test_that("Error cuando falta la columna 'post_content'", {
expect_error(
word_cloud(data.frame(otra_columna = c("Texto")), max_words = 50),
"'datos' debe contener una columna llamada 'post_content'."
)
})
test_that("Error cuando 'max_words' no es numérico", {
datos <- data.frame(post_content = c("Texto relevante."))
expect_error(
word_cloud(datos, max_words = "cincuenta"),
"'max_words' debe ser un número."
)
})
test_that("Error cuando 'stop_words' no es un vector de caracteres", {
datos <- data.frame(post_content = c("Texto relevante."))
expect_error(
word_cloud(datos, max_words = 50, stop_words = 123),
"'stop_words' debe ser un vector de palabras."
)
})
test_that("La función genera una nube de palabras correctamente", {
datos <- data.frame(
post_content = c(
"La inteligencia artificial está transformando el mundo.",
"La transformación digital depende de la inteligencia artificial."
)
)
# Generar la nube de palabras
nube <- word_cloud(datos, max_words = 5)
# Verificar que se genera un objeto de clase wordcloud2
expect_s3_class(nube, "wordcloud2")
# Verificar las palabras más frecuentes
palabras_frecuentes <- datos %>%
tidytext::unnest_tokens(word, post_content) %>%
dplyr::count(word, sort = TRUE) %>%
dplyr::slice_max(n, n = 5)
# Asegurarse de que las palabras aparecen en la nube
palabras_en_nube <- nube$x$word
expect_true(all(palabras_frecuentes$word %in% palabras_en_nube))
})
devtools::load_all()
test_that("Error cuando el input no es un data frame", {
expect_error(
word_cloud(list(a = 1, b = 2), max_words = 50),
"'datos' debe ser un data frame."
)
})
test_that("Error cuando falta la columna 'post_content'", {
expect_error(
word_cloud(data.frame(otra_columna = c("Texto")), max_words = 50),
"'datos' debe contener una columna llamada 'post_content'."
)
})
test_that("Error cuando 'max_words' no es numérico", {
datos <- data.frame(post_content = c("Texto relevante."))
expect_error(
word_cloud(datos, max_words = "cincuenta"),
"'max_words' debe ser un número."
)
})
test_that("Error cuando 'stop_words' no es un vector de caracteres", {
datos <- data.frame(post_content = c("Texto relevante."))
expect_error(
word_cloud(datos, max_words = 50, stop_words = 123),
"'stop_words' debe ser un vector de palabras."
)
})
test_that("La función genera una nube de palabras correctamente", {
datos <- data.frame(
post_content = c(
"La inteligencia artificial está transformando el mundo.",
"La transformación digital depende de la inteligencia artificial."
)
)
# Generar la nube de palabras
nube <- word_cloud(datos, max_words = 5)
# Verificar que se genera un objeto de clase wordcloud2
expect_s3_class(nube, "wordcloud2")
# Verificar las palabras más frecuentes
palabras_frecuentes <- datos %>%
tidytext::unnest_tokens(word, post_content) %>%
dplyr::count(word, sort = TRUE) %>%
dplyr::slice_max(n, n = 5)
# Asegurarse de que las palabras aparecen en la nube
palabras_en_nube <- nube$x$word
expect_true(all(palabras_frecuentes$word %in% palabras_en_nube))
})
test_that("Stop words son excluidas correctamente", {
datos <- data.frame(post_content = c("Esto es un ejemplo. Esto es una prueba."))
# Generar la nube de palabras excluyendo stop words
nube <- word_cloud(datos, max_words = 3, stop_words = c("esto", "es", "un", "una"))
# Verificar que las palabras stop no están en la nube
palabras_en_nube <- nube$x$word
expect_false(any(palabras_en_nube %in% c("esto", "es", "un", "una")))
})
test_that("La función maneja casos límite de datos correctamente", {
datos <- data.frame(post_content = c(""))
# Generar la nube con un texto vacío
expect_error(
word_cloud(datos, max_words = 5),
"No se encontraron palabras para generar la nube."
)
# Generar la nube con un único dato
datos <- data.frame(post_content = c("inteligencia artificial"))
nube <- word_cloud(datos, max_words = 5)
# Verificar que la palabra aparece en la nube
palabras_en_nube <- nube$x$word
expect_true("inteligencia" %in% palabras_en_nube)
expect_true("artificial" %in% palabras_en_nube)
})
devtools::load_all()
test_that("La función maneja casos límite de datos correctamente", {
datos <- data.frame(post_content = c(""))
# Generar la nube con un texto vacío
expect_error(
word_cloud(datos, max_words = 5),
"No se encontraron palabras para generar la nube."
)
# Generar la nube con un único dato
datos <- data.frame(post_content = c("inteligencia artificial"))
nube <- word_cloud(datos, max_words = 5)
# Verificar que la palabra aparece en la nube
palabras_en_nube <- nube$x$word
expect_true("inteligencia" %in% palabras_en_nube)
expect_true("artificial" %in% palabras_en_nube)
})
test_that("'max_words' limita correctamente la cantidad de palabras en la nube", {
datos <- data.frame(
post_content = c(
"La inteligencia artificial está transformando el mundo.",
"La transformación digital depende de la inteligencia artificial.",
"El futuro está marcado por la inteligencia artificial y la digitalización."
)
)
# Generar la nube con max_words = 3
nube <- word_cloud(datos, max_words = 3)
# Obtener las palabras en la nube
palabras_en_nube <- nube$x$wordcloud$data$word
# Verificar que el número de palabras no excede max_words
expect_lte(length(palabras_en_nube), 3)
})
test_that("'max_words' limita correctamente la cantidad de palabras en la nube", {
datos <- data.frame(
post_content = c(
"La inteligencia artificial está transformando el mundo.",
"La transformación digital depende de la inteligencia artificial.",
"El futuro está marcado por la inteligencia artificial y la digitalización."
)
)
# Generar la nube con max_words = 3
nube <- word_cloud(datos, max_words = 3)
# Obtener las palabras en la nube
palabras_en_nube <- nube$x$word
# Verificar que el número de palabras no excede max_words
expect_lte(length(palabras_en_nube), 3)
})
datos <- data.frame(
post_content = c(
"La inteligencia artificial está transformando el mundo.",
"La transformación digital depende de la inteligencia artificial.",
"El futuro está marcado por la inteligencia artificial y la digitalización."
)
)
# Generar la nube con max_words = 3
nube <- word_cloud(datos, max_words = 3)
# Obtener las palabras en la nube
palabras_en_nube <- nube$x$word
# Verificar que el número de palabras no excede max_words
expect_lte(length(palabras_en_nube), 3)
test_that("La función lanza un error si 'datos' no es un data frame", {
expect_error(
grafico_notas_por_mes("no es un data frame", "Título"),
"'datos' debe ser un data frame."
)
})
test_that("La función lanza un error si 'raw_post_date' no está en los datos", {
datos_sin_fecha <- data.frame(otra_columna = c(1, 2, 3))
expect_error(
grafico_notas_por_mes(datos_sin_fecha, "Título"),
"'datos' debe contener la columna 'raw_post_date'."
)
})
test_that("La función lanza un error si 'titulo' no es texto", {
datos <- data.frame(raw_post_date = c("2024-01-01", "2024-02-01"))
expect_error(
grafico_notas_por_mes(datos, 123),
"'titulo' debe ser texto (string)."
)
})
test_that("La función lanza un error si 'titulo' no es texto", {
datos <- data.frame(raw_post_date = c("2024-01-01", "2024-02-01"))
expect_error(
grafico_notas_por_mes(datos, 123),
"'titulo' debe ser texto (string) ."
)
})
test_that("La función lanza un error si 'titulo' no es texto", {
datos <- data.frame(raw_post_date = c("2024-01-01", "2024-02-01"))
expect_error(
grafico_notas_por_mes(datos, 123),
"'titulo' debe ser texto (string)."
)
})
test_that("La función lanza un error si 'titulo' no es texto", {
datos <- data.frame(raw_post_date = c("2024-01-01", "2024-02-01"))
expect_error(
grafico_notas_por_mes(datos, 123),
"'titulo' debe ser texto (string)."
)
})
test_that("La función lanza un error si 'titulo' no es texto", {
datos <- data.frame(raw_post_date = c("2024-01-01", "2024-02-01"))
expect_error(
grafico_notas_por_mes(datos, 123),
"'titulo' debe ser texto (string)."
)
})
devtools::load_all()
test_that("La función lanza un error si 'datos' no es un data frame", {
expect_error(
grafico_notas_por_mes("no es un data frame", "Título"),
"'datos' debe ser un data frame."
)
})
test_that("La función lanza un error si 'raw_post_date' no está en los datos", {
datos_sin_fecha <- data.frame(otra_columna = c(1, 2, 3))
expect_error(
grafico_notas_por_mes(datos_sin_fecha, "Título"),
"'datos' debe contener la columna 'raw_post_date'."
)
})
test_that("La función lanza un error si 'titulo' no es texto", {
datos <- data.frame(raw_post_date = c("2024-01-01", "2024-02-01"))
expect_error(
grafico_notas_por_mes(datos, 123),
"'titulo' debe ser texto (string)."
)
})
test_that("La función lanza un error si 'titulo' no es texto", {
datos <- data.frame(raw_post_date = c("2024-01-01", "2024-02-01"))
expect_error(
grafico_notas_por_mes(datos, 123),
"'titulo' debe ser texto (string)."
)
})
test_that("La función lanza un error si 'titulo' no es texto", {
datos <- data.frame(raw_post_date = c("2024-01-01", "2024-02-01"))
expect_error(
grafico_notas_por_mes(datos, 123),
"'titulo' debe ser texto (string)."
)
})
expect_error(
grafico_notas_por_mes(datos, 123),
"'titulo' debe ser texto (string)"
)
test_that("La función lanza un error si 'titulo' no es texto", {
datos <- data.frame(raw_post_date = c("2024-01-01", "2024-02-01"))
expect_error(
grafico_notas_por_mes(datos, 123),
"'titulo' debe ser texto (string)"
)
})
test_that("La función lanza un error si 'raw_post_date' no está en los datos", {
datos_sin_fecha <- data.frame(otra_columna = c(1, 2, 3))
expect_error(
grafico_notas_por_mes(datos_sin_fecha, "Título"),
"'datos' debe contener la columna 'raw_post_date'."
)
})
test_that("La función lanza un error si 'titulo' no es texto", {
datos <- data.frame(raw_post_date = c("2024-01-01", "2024-02-01"))
expect_error(
grafico_notas_por_mes(datos, 123),
"'titulo' debe ser texto (string)."
)
})
rlang::last_trace()
rlang::last_trace(drop = FALSE)
test_that("La función lanza un error si 'fecha_inicio' es posterior a 'fecha_fin'", {
datos <- data.frame(raw_post_date = c("2024-01-01", "2024-02-01"))
expect_error(
grafico_notas_por_mes(datos, "Título", fecha_inicio = "2024-03-01", fecha_fin = "2024-01-01"),
"'fecha_inicio' debe ser anterior o igual a 'fecha_fin'."
)
})
test_that("La función lanza un error si no hay datos en el rango de fechas", {
datos <- data.frame(raw_post_date = c("2024-01-01", "2024-02-01"))
expect_error(
grafico_notas_por_mes(datos, "Título", fecha_inicio = "2025-01-01", fecha_fin = "2025-12-31"),
"No hay datos en el rango de fechas seleccionado."
)
})
test_that("La función genera un gráfico correctamente con datos válidos", {
datos <- data.frame(raw_post_date = c("2024-01-01", "2024-02-01", "2024-02-15", "2024-03-01"))
grafico <- grafico_notas_por_mes(datos, "Título")
expect_s3_class(grafico, "ggplot")
})
test_that("La función filtra correctamente por rango de fechas", {
datos <- data.frame(raw_post_date = c("2024-01-01", "2024-02-01", "2024-02-15", "2024-03-01"))
grafico <- grafico_notas_por_mes(datos, "Título", fecha_inicio = "2024-02-01", fecha_fin = "2024-02-28")
expect_s3_class(grafico, "ggplot")
})
grafico <- grafico_notas_por_mes(datos, "Título")
datos <- data.frame(raw_post_date = c("2024-01-01", "2024-02-01", "2024-02-15", "2024-03-01"))
grafico <- grafico_notas_por_mes(datos, "Título")
View(grafico)
test_that("Las fechas en el gráfico están dentro del rango especificado", {
datos <- data.frame(raw_post_date = c("2024-01-01", "2024-02-01", "2024-02-15", "2024-03-01", "2024-04-01"))
# Generar gráfico con un rango de fechas específico
grafico <- grafico_notas_por_mes(datos, "Título", fecha_inicio = "2024-02-01", fecha_fin = "2024-03-31")
# Extraer las fechas del objeto gráfico
fechas_grafico <- grafico$data$fecha
# Comprobar que todas las fechas están dentro del rango
expect_true(all(fechas_grafico >= as.Date("2024-02-01") & fechas_grafico <= as.Date("2024-03-31")))
})
test_that("La función lanza un error si 'titulo' no es texto", {
datos <- data.frame(raw_post_date = c("2024-01-01", "2024-02-01"))
expect_error(
grafico_notas_por_mes(datos, 123),
"'titulo' debe ser texto (string)."
)
})
test_that("La función lanza un error si 'titulo' no es texto", {
datos <- data.frame(raw_post_date = c("2024-01-01", "2024-02-01"))
expect_error(
grafico_notas_por_mes(datos, 123),
regexp = "'titulo' debe ser texto \\(string\\)."
)
})
devtools::load_all("C:/Users/ismae/Documents/GitHub/datamedios")
datos <- extraer_noticias_fecha("gldksjgoijadpjcaqipjvpe", "2024-11-30", "2025-12-31")
test_that("La función procesa correctamente los datos sin sinónimos", {
datos <- data.frame(
search_query = "inteligencia artificial",
post_content = c(
"<html><p>La inteligencia artificial está cambiando el mundo.</p></html>",
"<html><p>No hay menciones aquí.</p></html>"
),
stringsAsFactors = FALSE
)
resultado <- extraccion_parrafos(datos)
expect_true("parrafos_filtrados" %in% colnames(resultado))
expect_equal(resultado$parrafos_filtrados[[1]], "La inteligencia artificial está cambiando el mundo.")
expect_equal(resultado$parrafos_filtrados[[2]], character(0))
})
test_that("La función procesa correctamente los datos con sinónimos", {
datos <- data.frame(
search_query = "inteligencia artificial",
post_content = c(
"<html><p>La IA está en todas partes.</p><p>La inteligencia artificial está en auge.</p></html>",
"<html><p>No hay menciones aquí.</p></html>"
),
stringsAsFactors = FALSE
)
sinonimos <- c("IA", "AI")
resultado <- extraccion_parrafos(datos, sinonimos)
expect_equal(resultado$parrafos_filtrados[[1]], c("La IA está en todas partes.", "La inteligencia artificial está en auge."))
expect_equal(resultado$parrafos_filtrados[[2]], character(0))
})
datos <- data.frame(
search_query = "inteligencia artificial",
post_content = c(
"<html><p>La IA está en todas partes.</p><p>La inteligencia artificial está en auge.</p></html>",
"<html><p>No hay menciones aquí.</p></html>"
),
stringsAsFactors = FALSE
)
sinonimos <- c("IA", "AI")
resultado <- extraccion_parrafos(datos, sinonimos)
View(resultado)
test_that("La función lanza un error si falta la columna 'post_content'", {
datos <- data.frame(search_query = "inteligencia artificial")
expect_error(extraccion_parrafos(datos), "El data frame debe contener la columna 'post_content'.")
})
test_that("La función lanza un error si 'datos' no es un data frame", {
datos <- list(search_query = "inteligencia artificial", post_content = "Contenido")
expect_error(extraccion_parrafos(datos), "'datos' debe ser un data frame.")
})
test_that("La función maneja contenido HTML mal formado", {
datos <- data.frame(
search_query = "inteligencia artificial",
post_content = c("<html><p>Texto válido</p>", "Contenido no HTML"),
stringsAsFactors = FALSE
)
resultado <- extraccion_parrafos(datos)
expect_true(all(is.na(resultado$parrafos_filtrados[[2]])))
})
datos <- data.frame(
search_query = "inteligencia artificial",
post_content = c("<html><p>Texto válido</p>", "Contenido no HTML"),
stringsAsFactors = FALSE
)
resultado <- extraccion_parrafos(datos)
View(resultado)
test_that("La función maneja contenido HTML mal formado", {
datos <- data.frame(
search_query = "inteligencia artificial",
post_content = c("<html><p>Texto válido</p>", "Contenido no HTML"),
stringsAsFactors = FALSE
)
resultado <- extraccion_parrafos(datos)
expect_true(all(is.na(resultado$parrafos_filtrados[[2]])))
})
test_that("La función maneja correctamente una columna 'post_content' vacía", {
datos <- data.frame(
search_query = "inteligencia artificial",
post_content = c("", ""),
stringsAsFactors = FALSE
)
resultado <- extraccion_parrafos(datos)
expect_true(all(sapply(resultado$parrafos_filtrados, is.na)))
})
test_that("La función procesa correctamente cuando 'sinonimos' está vacío", {
datos <- data.frame(
search_query = "inteligencia artificial",
post_content = c("<html><p>Texto sobre inteligencia artificial.</p></html>"),
stringsAsFactors = FALSE
)
resultado <- extraccion_parrafos(datos, sinonimos = NULL)
expect_equal(resultado$parrafos_filtrados[[1]], "Texto sobre inteligencia artificial.")
})
test_that("La función procesa textos largos con párrafos mixtos", {
datos <- data.frame(
search_query = "inteligencia artificial",
post_content = c(
"<html><p>La IA es una revolución.</p><p>Este es un párrafo irrelevante.</p><p>La inteligencia artificial cambiará el mundo.</p></html>"
),
stringsAsFactors = FALSE
)
sinonimos <- c("IA", "AI")
resultado <- extraccion_parrafos(datos, sinonimos)
expect_equal(
resultado$parrafos_filtrados[[1]],
c("La IA es una revolución.", "La inteligencia artificial cambiará el mundo.")
)
})
test_that("La función procesa textos largos con párrafos mixtos", {
datos <- data.frame(
search_query = "inteligencia artificial",
post_content = c(
"<html><p>La IA es una revolución.</p><p>Este es un párrafo irrelevante.</p><p>La inteligencia artificial cambiará el mundo.</p></html>"
),
stringsAsFactors = FALSE
)
sinonimos <- c("IA", "AI")
resultado <- extraccion_parrafos(datos, sinonimos)
expect_equal(test_that("La función elimina correctamente el HTML en los párrafos extraídos", {
# Simulación de datos con HTML
datos <- data.frame(
search_query = "inteligencia artificial",
post_content = c(
"<html><p><b>La inteligencia artificial</b> es el futuro.</p><p>Otro párrafo sin relevancia.</p><p>IA cambiará todo.</p></html>"
),
stringsAsFactors = FALSE
)
sinonimos <- c("IA", "AI")
resultado <- extraccion_parrafos(datos, sinonimos)
# Verificar que el HTML ha sido eliminado
expect_equal(
resultado$parrafos_filtrados[[1]],
c("La inteligencia artificial es el futuro.", "IA cambiará todo.")
)
})
resultado$parrafos_filtrados[[1]],
test_that("La función procesa textos largos con párrafos mixtos", {
datos <- data.frame(
search_query = "inteligencia artificial",
post_content = c(
"<html><p>La IA es una revolución.</p><p>Este es un párrafo irrelevante.</p><p>La inteligencia artificial cambiará el mundo.</p></html>"
),
stringsAsFactors = FALSE
)
sinonimos <- c("IA", "AI")
resultado <- extraccion_parrafos(datos, sinonimos)
expect_equal(
resultado$parrafos_filtrados[[1]],
c("La IA es una revolución.", "La inteligencia artificial cambiará el mundo.")
)
})
test_that("La función elimina correctamente el HTML en los párrafos extraídos", {
# Simulación de datos con HTML
datos <- data.frame(
search_query = "inteligencia artificial",
post_content = c(
"<html><p><b>La inteligencia artificial</b> es el futuro.</p><p>Otro párrafo sin relevancia.</p><p>IA cambiará todo.</p></html>"
),
stringsAsFactors = FALSE
)
sinonimos <- c("IA", "AI")
resultado <- extraccion_parrafos(datos, sinonimos)
# Verificar que el HTML ha sido eliminado
expect_equal(
resultado$parrafos_filtrados[[1]],
c("La inteligencia artificial es el futuro.", "IA cambiará todo.")
)
})
test_that("La función elimina correctamente el HTML en los párrafos extraídos", {
# Generar datos simulados usando extraer_noticias_max_res
datos <- extraer_noticias_max_res("boric", max_results = 20, subir_a_bd = FALSE)
# Sinónimos para la búsqueda
sinonimos <- c("IA", "AI")
# Procesar los datos con extraccion_parrafos
resultado <- extraccion_parrafos(datos, sinonimos)
# Comprobar que no exista HTML en los párrafos extraídos
contiene_html <- any(grepl("<[^>]+>", unlist(resultado$parrafos_filtrados), perl = TRUE))
# Evaluar el test
expect_false(contiene_html, info = "Los párrafos procesados no deberían contener HTML.")
})
